#include <iostream>

int main() {
	unsigned n, k;
	std::cin >> n >> k;

	unsigned temp = n;

	// a)
	// Тук първо, не искаме да зануляваме останалите битове, а да ги запазим
	// Също така искаме да направим k-тия бит 1
	// Идеалната операция за това е OR(|)
	// Когато направим x OR 0, то това връща x
	// А когато направим x OR 1, то това винаги връща 1
	// 
	// Пример: (n = 25, k = 3)
	// 0000000000000011001
	//				      |
	// 0000000000000001000 <- (1 << 3)
	// -------------------
	// 0000000000000011001
	// 
	// Пример: (n = 25, k = 2)
	// 0000000000000011001
	//					  |
	// 0000000000000000100 <- (1 << 2)
	// -------------------
	// 0000000000000011101
	temp = n | (1 << k);
	std::cout << "New number in a): " << temp << std::endl;

	// б)
	// Сега обаче трябва да направим същото нещо
	// обаче искаме да занулим k-тия бит ако е 1
	// Тоест трябва като приложим операцията върху 1 и 1, тя да дава 0
	// А иначе да се държи като OR
	// Еми това е точно операцията XOR(^) - изключващо или
	// 
	// Пример: (n = 25, k = 3)
	// 0000000000000011001
	//                    ^
	// 0000000000000001000 <- (1 << 3)
	// -------------------
	// 0000000000000010001
	// 
	// Пример: (n = 25, k = 2)
	// 0000000000000011001
	//                    ^
	// 0000000000000000100 <- (1 << 2)
	// -------------------
	// 0000000000000011101
	temp = n ^ (1 << k);
	std::cout << "New number in b): " << temp << std::endl;
}